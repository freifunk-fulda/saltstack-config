# THIS FILE IS CONTROLLED BY SALTSTACK
#
# Bird IPv4 configuration


{% if pillar.peerings[grains['id']].type == "ice" %}

# Route Origin Authorization / ToDo
#


# BGP template for ICE peerings
#
# This template is used by all the ICEVPN bgp peer configuration statements
#
template bgp bgp_ice {
	table private;
	local as ownas;
	import limit 10000;
	import keep filtered;
	import filter {
		if (is_default()) then {
			print "[ice] ASN ", bgp_path.last, " announces default route (via ", proto ,")";
			reject;
		}
		if (is_self_ula()) then {
			print "[ice] ASN ", bgp_path.last, " announces our RFC-1918 prefix (via ", proto ,")";
			reject;
		}
		if (is_self_net()) then {
			print "[ice] ASN ", bgp_path.last, " announces our prefix (via ", proto ,")";
			reject;
		}
		if (bgp_path.len > 16) then reject;
#		if (roa_check(icvpn_roa, net, bgp_path.last) = ROA_INVALID) then {
#			print "[ice] ROA check failed for ", net, " ASN ", bgp_path.last;
#			reject;
#		}
		if (is_freifunk()) then accept; 
		if (is_dn42()) then accept; 
		reject;
	};
	export filter {
		if (is_self_ula()) then accept;
		if (is_freifunk()) then accept;
		if (is_dn42()) then accept;
		reject;
	};
};


# Our peers
#
{% for peer, values in pillar.peerings[grains['id']].peers.items() if 'tun4' in values -%}

protocol bgp ice_{{ peer }} from bgp_ice {
	neighbor {{ pillar.peerings[grains['id']].peers[peer].tun4.right }} as {{ pillar.peerings[grains['id']].peers[peer].as }};
}

{%- endfor %}

{% endif %}

