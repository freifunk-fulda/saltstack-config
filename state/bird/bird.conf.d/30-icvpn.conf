# THIS FILE IS CONTROLLED BY SALTSTACK
#
# Bird IPv4 configuration


{% if pillar.peerings[grains['id']].type == "icvpn" %}

# Route Origin Authorization
#
# This table contains ROA entries, each consisting of a network prefix, max
# prefix length and an AS number. A ROA entry specifies prefixes which could
# be originated by that AS number.
# Note: This file gets generated from the icvpn-meta repository.
#
roa table icvpn_roa { 
	include "/etc/bird/icvpn/bird4-roa-icvpn.con?";
};



# BGP template for IC-VPN peerings
#
# This template is used by all the IC-VPN bgp peer configuration statements
# specified in /etc/bird/bird.conf.d/90-bird4-peers-icvpn.conf
#
template bgp bgp_icvpn {
	table private;
	local as ownas;
	import limit 10000;
	import keep filtered;
	import filter {
		if (is_default()) then {
			print "ASN ", bgp_path.last, " announces default route (via ", proto ,")";
			reject;
		}
		if (is_self_ula()) then {
			print "ASN ", bgp_path.last, " announces our RFC-1918 prefix (via ", proto ,")";
			reject;
		}
		if (is_self_net()) then {
			print "ASN ", bgp_path.last, " announces our prefix (via ", proto ,")";
			reject;
		}
		if (bgp_path.len > 16) then reject;
		if (roa_check(icvpn_roa, net, bgp_path.last) = ROA_INVALID) then {
			print "[icvpn] ROA check failed for ", net, " ASN ", bgp_path.last;
			reject;
		}
		if (is_freifunk()) then accept; 
		if (is_dn42()) then accept; 
		reject;
	};
	export filter {
		if (is_self_ula()) then accept;
		if (is_freifunk()) then accept;
		if (is_dn42()) then accept;
		reject;
	};
};



# Include bgp peers configuration
#
include "/etc/bird/icvpn/bird4-peers-icvpn.conf";


{% endif %}

